;; 4000000013562285 is in a disconnected place
globals [
	ncols			;; width of DEM
	nrows			;; height of DEM
	xllcorner			;; easting of SW corner, in map coords
	yllcorner			;; northing of SW corner
	celldx			;; width/height of one patch, in metres.
	minh			;; min height of any cell, in metres
	maxh			;; max height of any cell
	sealevel			;; current sea level, in metres.
	drown-depth		;; depth at which we can't move through water/get drowned
	time-started		;; in seconds (ticks)
	last-log			;; time of last stats-log.
	log-interval-t		;; log interval in ticks, derived from log-interval.
	max-node-id		;; maximum id number assigned to any node.
	node-table		;; table mapping from node OID to node turtle.
	residential-flooded		;; total number of residential buildings flooded so far.
	nonresidential-flooded	;; non-residential buildings flooded so far.
	no-defences		;; set to non-zero before setup to suppress reading of defences.
	no-roads			;; set to non-zero before setup to suppress reading of roads.
	no-buildings		;; set to non-zero before setup to suppress reading of buildings.
	defences			;; table mapping defence name to agentset of patches.
	timeline			;; time-ordered list of (time, count, actions) tuples.
	sporadic			;; list of (dfn, multiplier, actions) tuples.
	logging?			;; boolean. are we writing to the stats output file?
	end-time-str		;; time to end (used for behaviorspace)
	end-time
  
  evacuees ;; number of people evacuated

	building-class-index	;; hash[class name/code] of class index
	building-classes		;; array[building class index] of list of class index
	building-class-name	;; array[class index] of string
	max-bclass			;; class index count
	building-class-cfreq	;; array[max-bclass] of array of cumulative freq, shadowing building-class-nodes
	building-class-nodes	;; array[max-bclass] of array of node.
	building-class-totals	;; array[max-bclass] of building count for each class.

	Undefined Sea Land		;; integer constants initialised by setup.
]

patches-own [
	height		;; height of ground (metres above mean sea level).
	undefended-height	;; height without any flood defences.
	kind			;; Undefined, Sea, Land.
	residential	;; number of residential properties on this patch.
	nonresidential	;; number of non-residential properties.
	level			;; water level (metres above mean sea level)
	crossing		;; rlinks crossing this patch (agentset).
	vehicle-count	;; number of vehicles on this patch.
	total-speed	;; total speed of vehicles on this patch (in vcells)
	known-depth	;; crossing links know that this patch has this level of water (metres above height)
	flood-time	;; time cell first became wet, or false if still dry.
  buildings-flooded? ;; Whether the buildings have flooded or not (stops building counter double counting)
]
breed [rlinks rlink]
breed [roads road]
breed [nodes node]

;; a one-way path; two-way roads have two rlink agents.
rlinks-own [
	rlink-n0 rlink-n1	;; nodes at start and end of link respectively
	rlink-road		;; actual physical road
	rlink-reverse?		;; which way we're travelling along phys. road
	rlink-d			;; distance along link, in vcells.
	rlink-depth		;; depth this link is flooded to.
	rlink-stranded		;; number of vehicles stranded here
	rlink-vcells		;; array of vehicle, when vcount > 0
	rlink-vcount		;; how many vehicles travelling on link.

	;; link statistics
	rlink-vehicle-total		;; total number of vehicles entered this link
	rlink-velocity-total		;; totalled velocity of vehicles on this link over all steps
	rlink-vsteps			;; number of steps
]

;; a physical road; usually shared between two rlink agents, for a two-way road.
roads-own [
	road-d			;; distance along current road, in map units
	road-traveltime	;; estimated time to travel along road, in seconds.
	road-covering		;; array of patches we cover
	road-type			;; string
	road-elevation		;; height of this road above the patches it's on.
	road-oid			;; string (OID)
]

;; junction of one or more roads.
nodes-own [
	node-out			;; rlinks out of this node (agentset)
	node-in			;; rlinks into this node (agentset)
	node-id			;; identity of this node
	node-oid			;; external identity of this node
	;; position of node, in patch coords
	node-x
	node-y
	node-connected?	;; scratch variable, used by (dis)connected-nodes in pathfind.nls
]

;; make node ident if it doesn't already exist.
;; add link to the node's outgoing set and return the node agent.
to-report make-node [ident rlink out?]
	let n 0
	ifelse (table:has-key? node-table ident) [
		set n table:get node-table ident
	] [
		hatch-nodes 1 [
			set hidden? true
			set node-oid ident
			set node-id max-node-id
			set max-node-id max-node-id + 1
			table:put node-table node-oid self
			set n self
			set node-out []
			set node-in []
		]
	]
	ask n [
		ifelse out? [
			set node-out (fput rlink node-out)
		] [
			set node-in (fput rlink node-in)
		]
	]
	report n
end

;; is patch coord [x, y] within the map bounds?
to-report in-bounds? [x y]
	report x >= min-pxcor and x <= max-pxcor and
		y >= min-pycor and y <= max-pycor
end

;; direct distance between nodes n0 and n1
to-report crow-flies [n0 n1]
	let dtx [node-x] of n1 - [node-x] of n0
	let dty [node-y] of n1 - [node-y] of n0
	report sqrt (dtx * dtx + dty * dty)
end

;; called by path finding algorithm
to-report heuristic-traveltime [n0 n1]
	report (crow-flies n0 n1) * heuristic-factor / (30 * 0.44704)
end

;; look up a node by its OID
to-report get-node [n]
	report table:get node-table n
end

;; create a new road and its associated rlinks.
;; oid: the OID on the road.
;; n0id: the OID of the node at the start of the road.
;; n1id: the OID of the node at the end of the road.
;; rtype: the type of the road (e.g. "Dual Carriageway")
;; points: a list of external points (see external-point) defining the coverage of the road.
to make-road [oid n0id n1id len rtype points]
	create-roads 1 [
		set hidden? true
		let n0 0
		let n1 0
		let rl0 0
		let rl1 0
		set road-type rtype
		set road-oid oid
		hatch-rlinks 1 [
			set hidden? true
			set rlink-road myself
			set n0 make-node n0id self true
			set n1 make-node n1id self false
			set rlink-n0 n0
			set rlink-n1 n1
			set rlink-depth 0
			set rlink-reverse? false
			set rlink-vcount 0
			set rlink-vcells []
			set rl0 self
		]
		hatch-rlinks 1 [
			set hidden? true
			set rlink-road myself
			set rlink-n0 make-node n1id self true
			set rlink-n1 make-node n0id self false
			set rlink-depth 0
			set rlink-reverse? true
			set rlink-vcount 0
			set rlink-vcells []
			set rl1 self
		]
		let p0 (external-point (first points))
		ask n0 [
			set node-x (item 0 p0)
			set node-y (item 1 p0)
		]
		let prev-pixel []
		;; work out what patches this road covers
		let cover []
		foreach (but-first points) [
			let p1 (external-point ?)
			let pixels (line:line (item 0 p0) (item 1 p0) (item 0 p1) (item 1 p1))
			ifelse (length pixels = 0) [
				print (word "-- empty line from " p0 " to " p1)
			] [
				;; when the last pixel of the previous line coincides
				;; the the first pixel of the current line, merge the two.
				if first pixels = prev-pixel [
					set pixels but-first pixels
				]
				foreach pixels [
					let x (item 0 ?)
					let y (item 1 ?)
					if (in-bounds? x y) [
						ask (patch x y) [
							set crossing (fput rl0 crossing)
							set crossing (fput rl1 crossing)
							set cover (fput self cover)
						]
					]
					set prev-pixel ?
				]
			]
			set p0 p1
		]
		ask n1 [
			set node-x (item 0 p0)
			set node-y (item 1 p0)
		]
		set road-covering array2:from-list (reverse cover)

		let d (external-distance len)
		;; for some reason, lengths of roads are often less than crow-flies distance,
		;; so adjust them so they're at least as long. this feels well dodgy.
		let cfd (crow-flies n0 n1)
		if cfd > d [
			set d cfd
		]
		set road-d d
		let vcell-count round (d / vcell-d)
		if vcell-count = 0 [
			set vcell-count 1
		]
		set road-traveltime road-d / vcells-per-step2metres-per-second road-speed
		ask rl0 [
			set rlink-d vcell-count
		]
		ask rl1 [
			set rlink-d vcell-count
		]
	]
end

to-report vcells-per-step2metres-per-second [v]
	report v * patch2mapd vcell-d / vehicle-timestep / .44704
end

;; speed limit of road, in vcells
to-report road-speed
	ifelse road-type = "Dual Carriageway" [
		report 4
	] [ifelse road-type = "Single Carriageway" [
		report 2
	] [
		report 1
	]]
end

to read-roads
	file-close-all
	set node-table table:make
	let filename (word scenario "/roads.txt")
	print (word "-- reading " filename)
	ask patches [
		set crossing []
	]
	file-open filename
	;; read arc definitions
	while [not file-at-end?] [
		let z file-read
		if length z = 6 [
			make-road (item 0 z) (item 1 z) (item 2 z) (item 3 z) (item 4 z) (item 5 z)
		]
	]
	file-close
	ask patches [
		set crossing (turtle-set crossing)
	]
	ask nodes [
		set node-out (turtle-set node-out)
		set node-in (turtle-set node-in)
	]
	;; remove disconnected nodes.
	;; we'll be very unlucky to iterate more than once, unless our map
	;; is mostly disconnected...
	let dn [disconnected-nodes] of one-of nodes
	while [count dn > count nodes / 4] [
		print (word "-- started from disconnected node " [node-oid] of dn "; trying another")
		set dn [disconnected-nodes] of one-of nodes
	]
	delete-nodes dn
end

to delete-nodes [ns]
	ask turtle-set [node-roads] of ns [die]
	ask turtle-set [node-out] of ns [die]
	ask turtle-set [node-in] of ns [die]
	ask ns [die]
end

to-report parse-timeline-time [t]
	ifelse is-list? t [
		let tkind item 0 t
		ifelse tkind = "normal" [
			if length t != 3 [
				abort (word "invalid time spec: " t)
			]
			set t (fput "normal" parse-times (but-first t))
		] [ifelse tkind = "explicit" [
			;; XXX should check that all entries are two entry lists
			set t (fput "explicit" parse-times (but-first t))
		] [
			abort (word "invalid time spec kind: " t)
		]]
	] [
		set t parse-time t
	]
	report t
end

to-report parse-timeline-action [a]
	let verb item 0 a
	ifelse verb = "breach" [
		let d item 1 a
		if not table:has-key? defences d [
			abort (word "invalid defence name in breach action: " d)
		]
		report (list "breach" d)
	] [ifelse verb = "sealevel" [
		let lev item 1 a
		if not is-number? lev [
			abort (word "invalid sea level: " lev)
		]
		report (list "sealevel" lev)
	] [ifelse verb = "test" or verb = "evacuate" [
		report a
	] [ifelse verb = "vehicle" [
		if length a != 2 [
			abort (word "invalid vehicle creation entry: " a)
		]
		let vt item 1 a
		if not table:has-key? vehicle-types vt [
			abort (word "invalid vehicle type (" vt ") in " a)
		]
		report a
	] [
		abort (word "unknown timeline verb: " verb)
	]]]]
end

;; read timeline file.
;; parsed form is very similar to form in file, except that
;; times are parsed, and one-off events (in timeline) are separated
;; from sporadic events (in sporadic).
to read-timeline
	file-close-all
	let filename (word scenario "/timeline.txt")
	print (word "-- reading " filename)
	file-open filename
	let b file-read
	if not is-list? b [
		abort (word filename " must contain a list of timeline actions")
	]
	set timeline []
	set sporadic []
	foreach b [
		let it ?
		let t item 0 it
		
		if not is-string? t and not is-list? t [
			abort (word "invalid timeline item (expected time specification): " ?)
		]
		let sporadic? is-list? t
		set t parse-timeline-time t
		set it but-first it

		;; optional event multiplier
		let m 1
		if is-number? first it [
			set m first it
			set it but-first it
		]
		;; for one item, the weight is optional
		if length it = 1 [
			set it fput first it [1]
		]
		if it = [] or length it mod 2 != 0 [
			abort (word "invalid timeline item (expected [action weight] pairs): " ?)
		]
		let totweight 0
		let q it
		while [q != []] [
			if not is-list? item 0 q or not is-number? item 1 q [
				abort (word "invalid timeline item (expected [action weight] pairs): " ?)
			]
			set totweight totweight + item 1 q
			set q but-first but-first q
		]
		if totweight = 0 [
			set totweight 1
		]
		let actions map [
			ifelse-value is-list? ? [
				parse-timeline-action ?
			] [
				? / totweight
			]
		] it
		ifelse sporadic? [
			set sporadic fput (list t m actions) sporadic
		] [
			set timeline fput (list t m actions) timeline
		]
	]
	set timeline reverse timeline
end

to-report eval-distrib-fn [m d t]
	let v first d
	set d but-first d
	ifelse v = "normal" [
		let mean_ item 0 d
		let std item 1 d
		report (normal-distribution mean_ std t) * m
	] [if v = "explicit" [
		let p 0
		while [d != [] and first first d <= t] [
			set p item 1 first d
			set d but-first d
		]
		;; note: last item continues forever - so we can easily simulate a continuous
		;; stream of events if we wish.
		report p * m
	]]
	report 0
end

to-report parse-times [ts]
	report map [
		ifelse-value is-string? ? [
			parse-time ?
		] [ifelse-value is-list? ? [
			parse-times ?
		] [
			?
		]]
	] ts
end

to read-defences
	file-close-all
	set defences table:make
	let filename (word scenario "/defences.txt")
	print (word "-- reading " filename)
	file-open filename
	let name "unknown"
	while [not file-at-end?] [
		let z file-read
		if length z > 2 [
			set name (item 2 z)
		]
		let x (item 0 z)
		let y (item 1 z)
		ask patch (map2patchx x) (map2patchy y) [
			set undefended-height height
			set height height + 10000
			let p []
			if table:has-key? defences name [
				set p table:get defences name
			]
			table:put defences name (fput self p)
		]
	]
	file-close

	;; turn the patch lists of defence points into agent sets
	foreach table:keys defences [
		table:put defences ? (patch-set (table:get defences ?))
	]
end

to set-defence-height [name value]
	ask (table:get defences name) [
		set height undefended-height + value
		colour-patch
	]
end

to-report all-defences
	report table:keys defences
end

;; read the DEM.
;; sets up the patches, and celldx, xllcorner, yllcorner, ncols, nrows, minh, maxh
to read-map
	file-close-all
	let z [1]
	let nullheight -9999

	let filename (word scenario "/terrain.txt")
	print (word "-- reading " filename)
	file-open filename

	;; read header
	while [not file-at-end? and (length z > 0)] [
		set z file-read
		if (length z = 2) [
			let name (item 0 z)
			let i (item 1 z)
			ifelse (name = "ncols") [
				set ncols i
			] [ifelse (name = "nrows") [
				set nrows i
			] [ifelse (name = "xllcorner") [
				set xllcorner i
			] [ifelse (name = "yllcorner") [
				set yllcorner i
			] [ifelse (name = "NODATA_value") [
				set nullheight i
			] [ifelse (name = "cellsize") [
				set celldx i
			] [
				print (word "-- unexpected value: " name)
			]]]]]]
		]
	]
	if (world-width != ncols or world-height != nrows) [
		abort (word "arena size must be " ncols "x" nrows)
	]

	ask patches [
		set height 0
		set kind Undefined
		set residential 0
		set nonresidential 0
		set pcolor green
		set known-depth 0
    set buildings-flooded? false
	]

	;; read rows
	set minh 99999
	set maxh -99999
	let y max-pycor
	while [not file-at-end?] [
		set z file-read
		let x min-pxcor
		foreach z [
			ask patch x y [
				ifelse (close? ? nullheight) [
					set kind Sea
					set height 0
				] [
					set kind Land
					set height ?
					if (? < minh) [
						set minh ?
					]
					if (? > maxh) [
						set maxh ?
					]
					set pcolor red
				]
				set level height
				set undefended-height height
				set flood-time false
			]
			set x (x + 1)
		]
		set y (y - 1)
	]
	file-close
end

;; read the building class table.
;; set building-class-index, building-classes, building-class-name and max-bclass.
to read-building-codes
	file-close-all

	let filename (word scenario "/codes.txt")
	print (word "-- reading " filename)
	file-open filename

	set max-bclass 0
	set building-classes array2:from-list []
	set building-class-index table:make
	while [not file-at-end?] [
		let z file-read
		let bi max-bclass
		set max-bclass (max-bclass + 1)
		let code first z
		set z but-first z
		let classname first z
		set z but-first z

		table:put building-class-index code bi
		foreach fput classname (tokenize classname "/") [
			if not (table:has-key? building-class-index ?) [
				table:put building-class-index ? bi
			]
		]
		let cl (list bi)
		foreach z [
			let i table:get building-class-index ?
			foreach array2:item building-classes i [
				set cl fput ? cl
			]
		]
		array2:set building-classes bi (remove-duplicates cl)
	]
	set building-class-name array2:new max-bclass ""
	foreach table:keys building-class-index [
		;; it's actually an arbitrary one of the definitive names.
		array2:set building-class-name (table:get building-class-index ?) ?
	]
	file-close
end

;; binary search for x in the array of monotonically increasing numbers a.
;; return i such that if v was inserted at a[i], the order would be maintained.
to-report find-interval [v a]
	let lo 0
	let hi (array2:length a - 1)
	while [lo <= hi] [
		let mid int ((lo + hi) / 2)
		let x array2:item a mid
		ifelse v < x [
			set hi (mid - 1)
		] [
			ifelse v > x [
				set lo (mid + 1)
			] [
				report mid
			]
		]
	]
	report lo
end

to-report random-destination [class]
	if is-string? class [
		set class table:get building-class-index class
	]
	let r random-float 1
	let idx find-interval r (array2:item building-class-cfreq class)
	report array2:item (array2:item building-class-nodes class) idx
end

to-report array-last-position [x a]
	let n (array2:length a - 1)
	let i (n - 1)
	while[i >= 0] [
		if array2:item a i = x [
			report i
		]
		set i (i - 1)
	]
	report false
end

;; process all buildings.
;; set building-class-nodes, building-class-totals, building-class-cfreq.
;; requires populated map and roads.
to read-buildings
	file-close-all
	let filename (word scenario "/preprocessed-buildings.txt")
	let pfilename ""
	let preprocessing? false
	if not file-exists? filename [
		set preprocessing? true
		set pfilename filename
		set filename (word scenario "/buildings.txt")
	]

	ifelse preprocessing? [
		print (word "-- reading " filename " (preprocessing to " pfilename ")")
	] [
		print (word "-- reading " filename)
	]
	file-open filename

	let class-nodes (array2:new max-bclass [])		;; array of array of nodes for each class.
	let class-counts (array2:new max-bclass [])		;; node counts.
	let class-totals (array2:new max-bclass 0)			;; total building count for each class.
	let i 0
	while [i < max-bclass] [
		array2:set class-counts i array2:from-list []
		array2:set class-nodes i array2:from-list []
		set i (i + 1)
	]

let progress 0
	while [not file-at-end?] [
set progress progress + 1
if progress mod 1000 < 0.5 [
print (word "-- progress " progress)
]

		let z file-read
		let len length z
		if (len >= 3) [
			let x (map2patchx (item 0 z))
			let y (map2patchy (item 1 z))
			let k (item 2 z)
			
			let p patch x y
			;; preprocessed file includes nearest node id
			if p != nobody or k >= 1000 [
				let n nobody
				ifelse len >= 4 [
					set n table:get node-table (item 3 z)
				] [
					set n nearest-node x y
					set z lput ([node-oid] of n) z
				]
				if preprocessing? [
					file-open pfilename
					file-write z
					file-print ""
					file-open filename
				]
				let bclasses array2:item building-classes (table:get building-class-index k)
				foreach bclasses [
					let bi ?
					let bnodes (array2:item class-nodes bi)
					let counts (array2:item class-counts bi)
					;; search from end will be faster if building codes have reasonable geographical locality.
					let j array-last-position n bnodes
					ifelse is-number? j [
						array2:set counts j ((array2:item counts j) + 1)
					] [
						let clen (array2:length counts)
						array2:set counts clen 1
						array2:set bnodes clen n
					]
					array2:set class-totals bi (array2:item class-totals bi) + 1
				]
				if p != nobody [
					ask  p [
						if (kind = Land) [
							ifelse (k = 0) [
								set residential residential + 1
							] [
								set nonresidential nonresidential + 1
							]
						]
					]
				]
			]
		]
	]
	file-close-all
if preprocessing? [
	let xxx 0
	foreach array2:to-list building-class-name [
		let t (array2:item class-totals xxx)
		if t > 0.5 [
			print (word "-- " ? ": " t)
		]
		set xxx xxx + 1
	]
]

	set building-class-cfreq (array2:new max-bclass [])
	let bi 0
	while [bi < max-bclass] [
		let counts (array2:item class-counts bi)
		let n array2:length counts
		if n > 0 [
			let cfreq array2:new n 0
			let tot array2:item class-totals bi
			let ctot 0
			let j 0
			while [j < n] [
				set ctot ctot + (array2:item counts j) / tot
				array2:set cfreq j ctot
				set j (j + 1)
			]
			array2:set cfreq (n - 1) 1
			array2:set building-class-cfreq bi cfreq
		]
		set bi (bi + 1)
	]
	set building-class-nodes class-nodes
	set building-class-totals class-totals
end

to-report building-patches [class]
	let n array2:item building-class-nodes (table:get building-class-index class)
	report patch-set [patch node-x node-y] of turtle-set array2:to-list n
end

;; we don't actually keep enough information around
;; to work this out, so just read the file, as we're only
;; doing this out of curiosity. if we need to do this in seriousness,
;; we'll need to burn quite a bit more memory storing
;; patch->building class mappings.
to-report buildings-here
	file-close-all
	file-open (word scenario "/buildings.txt")
	let tots array2:new max-bclass 0
	while [not file-at-end?] [
		let z file-read
		let k item 2 z
		if (patch (map2patchx (item 0 z)) (map2patchy (item 1 z))) = self [
			foreach array2:item building-classes (table:get building-class-index k) [
				array2:set tots ? ((array2:item tots ?) + 1)
			]
		]
	]
	file-close
	let b []
	let bi 0
	foreach array2:to-list tots [
		if ? > 0 [
			set b fput (list (array2:item building-class-name bi) ?) b
		]
		set bi bi + 1
	]
	report b
end

to-report nearest-node [x y]
	report min-one-of nodes [
		(node-x - x) ^ 2 + (node-y - y) ^ 2
	]
end		

to colour-patch
	ifelse (height > undefended-height) [
		set pcolor magenta
	] [ifelse (count crossing > 0) [
		ifelse known-depth > 0 [
			set pcolor [55 0 225]
		] [
			ifelse vehicle-count = 0 [
				set pcolor [170 170 170]
			] [
let avg total-speed / vehicle-count
if avg > 4 [
	inspect self
	abort (word "average speed too high (" total-speed "/" vehicle-count ")")
]
				set pcolor scale-color red (total-speed / vehicle-count) 0 8
				;;set pcolor black	;; (scale-color green vehicle-count 2 0)
			]
		]
	] [ifelse (kind = Sea) [
		set pcolor [55 0 225]
	] [ifelse (known-depth > 0) [
		set pcolor [97 248 255]		;; [40 163 255]
	] [ifelse (level < height) [
		set pcolor white
	] [ifelse (kind = Land) [
		ifelse nonresidential > 0 or residential > 0 [
			ifelse residential > nonresidential [
				set pcolor yellow
			] [
				set pcolor lime
			]
		] [
			set pcolor (scale-color brown height maxh minh)
		]
	][
		set pcolor (yellow - 1)
	]]]]]]
end

;; hydro model informs us that a given cell is wet.
;; inform all the links that cross this cell that they
;; are wet, and mark any stranded cars as drowned if necessary.
;; XXX drying would be a problem, as finding out when
;; link has completely dried out would be expensive -
;; for each link that crosses this patch, we'd need
;; to set its rlink-depth to the minimum of the water depth
;; on all cells that it crosses.
to flood-cell
	let depth level - height
	if depth > known-depth [
		set known-depth depth
		ask crossing [
			set rlink-depth depth - [road-elevation] of rlink-road
			if rlink-depth > drown-depth [
				set vehicles-drowned vehicles-drowned + rlink-stranded
				set vehicles-isolated vehicles-isolated - rlink-stranded
				set rlink-stranded 0
			]
		]
    if not buildings-flooded? [
		  set residential-flooded residential-flooded + residential
		  set nonresidential-flooded nonresidential-flooded + nonresidential
      set buildings-flooded? true
    ]
		if flood-time = false [
			set flood-time ticks
		]
		colour-patch
	]
end

to-report defined? [cell]
	report cell != nobody and [kind] of cell != Undefined
end

to print-cell
	print (word "[" pxcor " " pycor "]"
		"    h: " height "; l: " level)
end

;; coordinate transformations:

to-report map2patchd [x]
	report x / celldx
end

to-report patch2mapd [x]
	report x * celldx
end

to-report map2patchx [long]
	report ((long - xllcorner) / celldx) + min-pxcor
end

to-report map2patchy [lat]
	report ((lat - yllcorner) / celldx) + min-pycor
end

to-report patch2mapx [x]
	report (x - min-pxcor) * celldx + xllcorner
end

to-report patch2mapy [y]
	report (y - min-pycor) * celldx + yllcorner
end

;; patch's position in latlong
to-report patch-pos
	report (list (patch2mapx pxcor) (patch2mapy pycor))
end

;; convert from external point representation as found in roads.txt (fixed point)
;; to local patch coords.
to-report external-point [p]
	report (list (map2patchx ((item 0 p) / 1000)) (map2patchy ((item 1 p) / 1000)))
end

;; convert from external represention of distance as in roads.txt (fixed point)
;; to local patch distance.
to-report external-distance [p]
	report map2patchd (p / 1000)
end

to-report xydist [x0 y0 x1 y1]
	let xd x1 - x0
	let yd y1 - y0
	report sqrt (xd * xd + yd * yd)
end

to-report close? [x v]
	report abs(x - v) < 0.0001
end

;; blend rgb colours c1 and c2, where p: [0 <= p <= 1]
;; gives the proportion of c2 to add to c1.
to-report blend [c1 c2 p]
	if is-number? c1 [
		set c1 extract-rgb c1
	]
	if is-number? c2 [
		set c2 extract-rgb c2
	]
	report (map [?1 * (1 - p) + ?2 * p] c1 c2)
end

to abort [err]
	file-close-all
	set err (word "error: " err)
	print (word "-- " err)
	let x err + 0			;; invoke a type exception
end

to setup
	;; let some variables slip through the clear-all net...
	let nb no-buildings
	let nd no-defences
	let nr no-roads
	let ets end-time-str

	clear-all
	file-close-all
	set no-buildings nb
	set no-defences nd
	set no-roads nr
	set end-time-str ets

	set Undefined 0
	set Sea 1
	set Land 2

	set drown-depth .2		;; 20cm

	read-map
	read-building-codes
	vehicle-init
	ifelse no-roads = 0 [
		read-roads
		;; manually fix up the bridge over the river.
		;; XXX this should be done from a config file.
		ask roads with [road-oid = "4000000012487984"] [set road-elevation 10]
	] [
		ask patches [set crossing (turtle-set)]
	]
	if no-buildings = 0 [
		read-buildings
	]
	if no-defences = 0 [
		read-defences
	]
	read-timeline
	;; set-calc
	ask patches [colour-patch]
	set time-started parse-time start-time
	tick-advance time-started
	
	if end-time-str != 0 [
		set end-time parse-time end-time-str
	]
	
	ifelse netlogo-applet? [
		set log-interval ""
		set logging? false
	] [
		set logging? true
		set log-interval-t parse-time log-interval
		file-open-trunc (word scenario "/stats.out")
		file-print (word "start," ticks)
		file-flush
	]
	stats-reset
	print "-- done setup"
end

to perform-action [actions]
	let r random-float 1
	let action first actions
	while [r > 0] [
		set action item 0 actions
		set r r - item 1 actions
		set actions but-first but-first actions
	]
;; print (word (time-string ticks) ": " action)
	let verb item 0 action
	ifelse verb = "breach" [
		let d item 1 action
		set-defence-height d 0
		print (word "-- defence " d " breached")
	] [ifelse verb = "sealevel" [
		set sealevel item 1 action
		print (word "-- sealevel " sealevel)
	] [ifelse verb = "vehicle" [
		make-vehicle item 1 action
	] [if verb = "evacuate" [
		print "-- evacuate!"
		set evacuate? true
	]]]]
end

;; report some likely number of events that
;; have occurred from t-delta until t, given
;; the event density distribution function dfn.
;;
;; we assume that the distribution function
;; changes very slowly over time compared to delta,
;; so we assume that a point sample is sufficient
to-report event-count [m dfn delta t]
	let l eval-distrib-fn m dfn (t - delta / 2)
	if l <= 0 [
		report 0
	]
	let n 0
	let t0 t - delta
	loop [
		let dt (- ln (1 - random-float 1)) / l
		set t0 t0 + dt
		if t0 >= t [
			report n
		]
		set n n + 1
	]
end

to model-step
	while [timeline != [] and first first timeline <= ticks] [
		let a first timeline
		let m item 1 a
		let actions item 2 a
		repeat m [
			perform-action actions
		]
		set timeline but-first timeline
	]
	foreach sporadic [
		let dfn item 0 ?
		let m item 1 ?
		let actions item 2 ?
		let n event-count m dfn vehicle-timestep ticks
		repeat n [
			perform-action actions
		]
	]
	if evacuate? [
		ask vehicles with [not ve-evacuate?] [set ve-evacuate? true]
		set evacuate? false
	]
	ask vehicles [vehicle-step]
	let t ticks
	tick-advance vehicle-timestep
	if int ticks != int t [
		water-step
	]
	if logging? and int (ticks / log-interval-t) != int (last-log / log-interval-t) [
		stats-log
	]
  setup-plots
end

;; Plot the number of vehicles drowned etc.
to setup-plots
  let vehicle-max-plot 100 
  if vehicles-driving > 100  [ set vehicle-max-plot vehicles-driving ]
  
  set-current-plot "Timeseries of drowned vehicles"
  set-plot-y-range 0 vehicle-max-plot
  plot vehicles-drowned
  
  let buildings-max-plot 100 
  if residential-flooded > 100  [ set vehicle-max-plot vehicles-driving ]
  
  ;; Count vehicles in evacuee point 
  set evacuees 0
  ask vehicles [if ve-carpark = (node 7378) [set evacuees (evacuees + 1) ] ]
  
  set-current-plot "Timeseries of buildings flooded"
  set-plot-y-range 0 buildings-max-plot
  set-current-plot-pen "rp"
  plot residential-flooded
  set-current-plot-pen "nrp"
  plot nonresidential-flooded
  
end

to stats-reset
	set last-log ticks
	ask rlinks [
		set rlink-vehicle-total 0
		set rlink-velocity-total 0
		set rlink-vsteps 0 
	]
end

to stats-log
	file-open (word scenario "/stats.out")
	file-print (word "dump," (ticks - time-started))
	ask rlinks with [rlink-vsteps > 0] [
		file-print (word
			"link"
			"," [road-oid] of rlink-road
			"," (ifelse-value rlink-reverse? ["-"] ["+"])
			"," rlink-vehicle-total
			"," precision (rlink-velocity-total / rlink-vsteps) 3)
	]
	file-flush
	stats-reset
end

to write-flood-map
	file-open-trunc (word scenario "/floodmap.out")
	file-print (word "ncols " ncols)
	file-print (word "nrows " nrows)
	file-print (word "xllcorner " xllcorner)
	file-print (word "yllcorner " yllcorner)
	file-print (word "cellsize " celldx)
	file-print ""
	let y max-pycor
	let need-comma? false
	while [y >= min-pycor] [
		let x min-pxcor
		while [x <= max-pxcor] [
			ask patch x y [
				if need-comma? [
					file-type ","
				]
				file-type (level - height)
				set need-comma? true
			]
			set x (x + 1)
		]
		file-print ""
		set y (y - 1)
	]
	file-close
end

to write-floodtime-map
	file-open-trunc (word scenario "/floodtimemap.out")
	file-print (word "ncols " ncols)
	file-print (word "nrows " nrows)
	file-print (word "xllcorner " xllcorner)
	file-print (word "yllcorner " yllcorner)
	file-print (word "cellsize " celldx)
	file-print ""
	let y max-pycor
	let need-comma? false
	while [y >= min-pycor] [
		let x min-pxcor
		while [x <= max-pxcor] [
			ask patch x y [
				let t 0
				if kind = Land and flood-time != false [
					set t flood-time
				]
				if need-comma? [
					file-type ","
				]
				file-type (time-string t)
				set need-comma? true
			]
			set x (x + 1)
		]
		file-print ""
		set y (y - 1)
	]
	file-close
end

to-report csvquote [s]
	if is-list? s [
		let need-comma? false
		let r ""
		foreach s [
			if need-comma? [
				set r (word r ",")
			]
			set r (word r csvquote ?)
			set need-comma? true
		]
		report r
	] 
	let i position "\"" s
	let needquote? i != false or member? "," s or member? "\n" s
	if i != false [
		let r substring s 0 i
		while [i < length s] [
			let c item i s
			ifelse c = "\"" [
				set r (word r "\\\"")
			] [
				set r (word r c)
			]
			set i i + 1
		]
		set s r
	]
	if needquote? [
		report (word "\"" s "\"")
	]
	report s
end

to-report report-info [a]
	if is-string? a [
		report a
	]
	if is-number? a [
		report time-string a
	]
	if is-patch? a [
		report (word "cell " (patch2mapx [pxcor] of a) (patch2mapy [pycor] of a))
	]
	if is-rlink? a [
		report (word "link "
			[road-oid] of [rlink-road] of a
			(ifelse-value ([rlink-reverse?] of a) ["-"] ["+"]))
	]
	if is-node? a [
		report (word "node " [node-oid] of a)
	]
	abort (word "unknown kind of thing for report-info: " a)
end
			
to write-final-report
	write-flood-map
	write-floodtime-map

	file-open-trunc (word scenario "/report.out")
	file-print (word "report," ticks)
	ask vehicles with [ve-action = Dead] [
		file-print (word "vehicle," csvquote ve-type "," (csvquote map [report-info ?] ve-death-info))
	]
	file-close
end
	
to file-open-trunc [name]
	carefully [file-delete name] []
	file-open name
	file-type ""		;; force netlogo to check that the file can actually be written
end

to-report cum-norm [mean_ std x]
	report 0.5 * (1 + math:erf ((x - mean_) / (std * sqrt 2)))
end

to-report normal-distribution [mean_ std x]
	let d x - mean_
	report ((1.0 / (std * sqrt(2.0 * pi))) *
			exp (-(d * d) / (2.0 * std * std)))
end
