/** (c) 2007 Uri Wilensky. See README.txt for terms of use. **/

package org.nlogo.extensions.profiler;

import org.nlogo.api.Syntax;
import org.nlogo.api.Context;
import org.nlogo.api.DefaultCommand;
import org.nlogo.api.DefaultReporter;
import org.nlogo.api.Argument; 
import org.nlogo.api.Context;
import org.nlogo.api.ExtensionException;
import org.nlogo.api.LogoException;

public class ProfilerExtension extends org.nlogo.api.DefaultClassManager
{
    static String profilerClassName = "org.nlogo.extensions.profiler.QuickTracer" ;
	
    public void load( org.nlogo.api.PrimitiveManager primManager ) {
	
		primManager.addPrimitive( "start", new ProfilerStart());
		primManager.addPrimitive( "stop", new ProfilerStop());
		primManager.addPrimitive( "reset", new ProfilerReset());
		primManager.addPrimitive( "report", new ProfilerReport());
		primManager.addPrimitive( "calls", new ProfilerProcedureCalls());
		primManager.addPrimitive( "exclusive-time", new ProfilerProcedureExclusiveTime());
		primManager.addPrimitive( "inclusive-time", new ProfilerProcedureInclusiveTime());
	
		// For changing which profiler class is used
		primManager.addPrimitive( "set-class", new ProfilerClass());
    }
    
    public void runOnce( org.nlogo.api.ExtensionManager em )
        throws org.nlogo.api.ExtensionException
    {
		try
	    {
			java.lang.Class clas = Class.forName( profilerClassName );
			org.nlogo.nvm.Tracer.profilingTracer =
				org.nlogo.nvm.Tracer.initializeTracer( clas ) ;
			// we disable it once it is installed, so that
			// we don't start collecting profiling data until
			// ProfilerStart is called.  -- CLB
			org.nlogo.nvm.Tracer.profilingTracer.disable() ;
	    }
		catch( ClassNotFoundException ex )
	    {
		
			System.err.println( "PROFILER: Cannot find Tracer class [" + profilerClassName + "]" ) ;
	    }
    }

    public static class ProfilerStart extends DefaultCommand
    {
		public Syntax getSyntax() {
			return Syntax.commandSyntax() ;
		}
		public void perform(Argument args[], Context context) throws ExtensionException {

			if ( Boolean.getBoolean( "org.nlogo.noGenerator" ) )
			{
				throw new ExtensionException("The profiler extension requires the NetLogo Bytecode generator, which is currently turned off, see the org.nlogo.noGenerator property.");
			}
										

			
			if ( org.nlogo.nvm.Tracer.profilingTracer == null )
			{
				try
				{
					java.lang.Class clas = Class.forName( profilerClassName );
					org.nlogo.nvm.Tracer.profilingTracer =
						org.nlogo.nvm.Tracer.initializeTracer( clas ) ;
				}
				catch( ClassNotFoundException ex )
				{
			    
					System.err.println( "PROFILER: Cannot find Tracer class [" + profilerClassName + "]" ) ;
				}
			}
	    
			org.nlogo.nvm.Tracer.profilingTracer.enable() ;
		}
	
    }
    
    public static class ProfilerStop extends DefaultCommand
    {
		public Syntax getSyntax() {
			return Syntax.commandSyntax() ;
		}
		public void perform(Argument args[], Context context) throws ExtensionException {
			if ( org.nlogo.nvm.Tracer.profilingTracer != null )
			{
				org.nlogo.nvm.Tracer.profilingTracer.disable() ;
			}
		}
	
    }
    
    public static class ProfilerReset extends DefaultCommand
    {
		public Syntax getSyntax() {
			return Syntax.commandSyntax() ;
		}
		public void perform(Argument args[], Context context) throws ExtensionException {
			if ( org.nlogo.nvm.Tracer.profilingTracer != null )
			{
				org.nlogo.nvm.Tracer.profilingTracer.reset() ;
			}
		}
	
    }

    public static class ProfilerReport extends DefaultReporter
    {
		public Syntax getSyntax() {
			return Syntax.reporterSyntax(Syntax.TYPE_LIST) ;
		}
		public Object report(Argument args[], Context context) throws ExtensionException {
			if ( org.nlogo.nvm.Tracer.profilingTracer != null )
			{
				java.io.ByteArrayOutputStream outArray = new java.io.ByteArrayOutputStream() ;
				java.io.PrintStream out = new java.io.PrintStream( outArray ) ;
				org.nlogo.nvm.Tracer.profilingTracer.dump( out ) ;
				return outArray.toString() ;
			}
			return "" ;
		}
    }
    public static class ProfilerProcedureCalls extends DefaultReporter
    {
		public Syntax getSyntax() {
			return Syntax.reporterSyntax
				( new int[] { Syntax.TYPE_STRING } ,
				  Syntax.TYPE_NUMBER ) ;
		}
		public Object report(Argument args[], Context context) throws ExtensionException, LogoException {
			if ( org.nlogo.nvm.Tracer.profilingTracer != null )
			{
				Object arg0 = args[ 0 ].getString().toUpperCase() ;
				Long calls = (Long) ((ProfilingTracer)org.nlogo.nvm.Tracer.profilingTracer).callCounts.get( arg0 );
				if ( calls != null )
				{
					return new Double(calls);
				}
			}
			return new Double(0) ;
		}
	}

    public static class ProfilerProcedureExclusiveTime extends DefaultReporter
    {
		public Syntax getSyntax() {
			return Syntax.reporterSyntax
				( new int[] { Syntax.TYPE_STRING } ,
				  Syntax.TYPE_NUMBER ) ;
		}
		public Object report(Argument args[], Context context) throws ExtensionException, LogoException {
			if ( org.nlogo.nvm.Tracer.profilingTracer != null )
			{
				Object arg0 = args[ 0 ].getString().toUpperCase() ;
				Long etime =((ProfilingTracer)org.nlogo.nvm.Tracer.profilingTracer).exclusiveTimes.get( arg0 );
				if ( etime != null )
				{
					return new Double( etime / 1000000.0 );
				}
			}
			return new Double(0) ;
		}
	}

	public static class ProfilerProcedureInclusiveTime extends DefaultReporter
    {
		public Syntax getSyntax() {
			return Syntax.reporterSyntax
				( new int[] { Syntax.TYPE_STRING } ,
				  Syntax.TYPE_NUMBER ) ;
		}
		public Object report(Argument args[], Context context) throws ExtensionException, LogoException {
			if ( org.nlogo.nvm.Tracer.profilingTracer != null )
			{
				Object arg0 = args[ 0 ].getString().toUpperCase() ;
				Long itime =((ProfilingTracer)org.nlogo.nvm.Tracer.profilingTracer).inclusiveTimes.get( arg0 );
				if ( itime != null )
				{
					return new Double( itime / 1000000.0 );
				}
			}
			return new Double(0) ;
		}
	}

    public static class ProfilerClass extends DefaultCommand
    {
		public Syntax getSyntax() {
			int[] right = {Syntax.TYPE_STRING};
			return Syntax.commandSyntax(right) ;
		}
		public void perform(Argument args[], Context context) throws ExtensionException, LogoException{
			profilerClassName = (String)args[0].get();

			try
			{
				java.lang.Class clas = Class.forName( profilerClassName );
				org.nlogo.nvm.Tracer.profilingTracer =
					org.nlogo.nvm.Tracer.initializeTracer( clas ) ;
			}
			catch( ClassNotFoundException ex )
			{
				
				System.err.println( "PROFILER: Cannot find Tracer class [" + profilerClassName + "]" ) ;
			}
		}
    }
}
