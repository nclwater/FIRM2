;; show the path followed by the A* algorithm

globals [
	mouse-started?
	first-node
	dest-node
	last-hdist
	search-count
]

to pathshow-setup
	set mouse-started? false
end

to show-find-path [n0 n1]
	let k show-find-path0 n0 n1 []
	foreach k [
		colour-road ([rlink-road] of ?) red
	]
end

to show-finding
	ifelse mouse-down? [
		ifelse not mouse-started? [
			set first-node nearest-node mouse-xcor mouse-ycor
			set mouse-started? true
			set dest-node first-node
			ask patches [colour-patch]
			set last-hdist heuristic-factor
		] [
			let d nearest-node mouse-xcor mouse-ycor
			if d != dest-node [
				set dest-node d
				show-find-path first-node dest-node
			]
		]
	] [
		set mouse-started? false
		if last-hdist != heuristic-factor [
			show-find-path first-node dest-node
			set last-hdist heuristic-factor
		]
	]
end

to-report show-find-path0 [n0 n1 blocked]
	ask patches [colour-patch]
	let scount 0
	if blocked = [] [
		set blocked table:make
	]
	if is-string? n0 [
		set n0 table:get node-table n0
	]
	if is-string? n1 [
		set n1 table:get node-table n1
	]
	let mark (array2:new max-node-id [])
	if (n0 = n1) [
		report []			;; XXX can't tell this result from no path (except by comparing n0=n1)
	]
	let open pq:new
	let n0m get-mark n0 mark
	pq:add open 0 n0m
	setm-open n0m true

	loop [
		if pq:length open = 0 [
			set search-count scount
			report []
		]
		let nm pq:remove open

		setm-open nm false
		setm-closed nm true;

		let n (getm-n nm)
		if(n = n1) [
			let rl (getm-rlink nm)
			let p []
			;; backtrack to start, saving links as we go.
			loop [
				set p (fput rl p)
				set n [rlink-n0] of rl
				if (n = n0) [
					set search-count scount
					report p
				]
				set rl (getm-rlink (array2:item mark ([node-id] of n)))
			]
		]
		ask [node-out] of n [
			if not (table:has-key? blocked who) [
				set scount (scount + 1)
				colour-road rlink-road yellow
				let m rlink-n1
				let mm get-mark m mark
				let f (getm-g nm) + [road-traveltime] of rlink-road
	
				if (getm-open mm) and f < (getm-g mm) [
					pq:delete-item open mm
					setm-open mm false
				]
				;; only happens when h is not admissible
				if (getm-closed mm) and f < (getm-g mm) [
					setm-closed mm false
				]
				if not (getm-open mm) and not (getm-closed mm) [
					setm-g mm f
					setm-rank mm (f + (heuristic-traveltime (getm-n mm) n1))
					setm-parent mm n
					setm-rlink mm self
					pq:add open (- (getm-rank mm)) mm
					setm-open mm true
				]
			]
		]
	]
end

to colour-road [road col]
	ask (patch-set array2:to-list [road-covering] of road) [set pcolor col]
end
